AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  experso

  Sample SAM Template for experso

Globals:
  Function:
    Timeout: 300

Parameters:
  SNSTopicName:
    Type: String
    Description: SNS topic name
  SubscriptionEmail:
    Type: String
    Description: Email to be notified
  CampaignArn:
    Type: String
    Description: Personalize Campaign Arn
Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SNS Topic Name
      TopicName: !Ref SNSTopicName
  NotificationEmail:
    Type:AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref SubEmail
      Protocol: Email
      TopicArn: !Ref NotifcationTopic
  ImportData:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/import-data/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
      Environment:
        Variables:
          PERSONALIZE_ROLE_ARN: !GetAtt [PersonalizeRole, Arn]
  CheckImport:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/check-import/
      Handler: cimport.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
  Train:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/train/
      Handler: train.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
  CheckTrain:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/check-train/
      Handler: ctrain.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
  Deploy:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/deploy/
      Handler: deploy.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
  CheckDeploy:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/check-deploy/
      Handler: cdeploy.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
  DeleteCampaign:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/check-deploy/
      Handler: cdeploy.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
  # ---- Destroy Lambdas ---- 
  DeleteCampaign:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/delete-campaign/
      Handler: dcamp.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
  DeleteSolution:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/delete-solution/
      Handler: dsolution.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
  DeleteDataset:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/delete-dataset/
      Handler: ddataset.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
  NotifyTopic:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/notify/
      Handler: notify.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic
  S3Lambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/s3lambda/
      Handler: notify.lambda_handler
      Runtime: python3.6
      Role: !GetAtt [LambdaRole, Arn]
  # ------ Deploy State Machine ------ 

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub lambda.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonPersonalizeFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "personalize:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: !GetAtt [PersonalizeRole, Arn]
  PersonalizeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - personalize.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonPersonalizeFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
        - PolicyName: PersonalizeS3BucketAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: arn:aws:s3:::*
  DeployStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "import-data",
              "States": {
                "import-data": {
                  "Type": "Task",
                  "Resource": "${ImportDataArn}",
                  "Next": "check-import"
                },
                "check-import": {
                  "Type": "Task",
                  "Resource": "${CheckImportArn}",
                  "Next": "decision-import"
                },
                "decision-import": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "BooleanEquals": false,
                      "Next": "sleep-import"
                    }
                  ],
                  "Default": "train"
                },
                "sleep-import": {
                  "Type": "Wait",
                  "Seconds": 300, 
                  "Next": "check-import" 
                },
                "train": {
                  "Resource": "${TrainArn}",
                  "Type": "Task", 
                  "Next": "check-train"
                },
                "check-train": {
                  "Resource": "${CheckTrainArn}",
                  "Type": "Task", 
                  "Next": "decision-train"
                },
                "decision-train": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "BooleanEquals": false,
                      "Next": "sleep-train"
                    }
                  ],
                  "Default": "deploy"
                },
                "sleep-train": {
                  "Type": "Wait",
                  "Seconds": 3000, 
                  "Next": "check-train" 
                },
                "deploy": {
                  "Resource": "${DeployArn}",
                  "Type": "Task", 
                  "Next": "check-deploy"
                },
                "check-deploy": {
                  "Resource": "${CheckDeployArn}",
                  "Type": "Task", 
                  "Next": "decision-deploy"
                },
                "decision-deploy": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "BooleanEquals": false,
                      "Next": "sleep-deploy"
                    }
                  ],
                  "Default": "notify"
                },
                "sleep-deploy": {
                    "Type": "Wait",
                    "Seconds": 600, 
                    "Next": "check-deploy" 
                },
                "notify": {
                  "Type": "Task",
                  "Resource": "${NotifyTopicArn}",
                  "End": true
                }
              }
            }
          - CheckDeployArn: !GetAtt [CheckDeploy, Arn]
            CheckImportArn: !GetAtt [CheckImport, Arn]
            CheckTrainArn: !GetAtt [CheckTrain, Arn]
            DeployArn: !GetAtt [Deploy, Arn]
            ImportDataArn: !GetAtt [ImportData, Arn]
            TrainArn: !GetAtt [Train, Arn]
            NotifyTopicArn: !GetAtt [NotifyTopic, Arn]

      RoleArn: !GetAtt [StatesExecutionRole, Arn]
  DestroyStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "Destroy Campaign",
              "States": {
                "Destroy Campaign": {
                  "Type": "Task",
                  "Resource": "${DeleteCampaign}",
                  "Next": "Destroy Solutions" 
                },
                "Destroy Solutions": {
                  "Type": "Task",
                  "Resource": "${DeleteSolution}",
                  "Next": "Destroy Databases"
                },
                "Destroy Databases": {
                  "Type": "Task",
                  "Resource": "${DeleteDatasets}",
                  "End": true
                }
              }
            }
          - DeleteCampaign: !GetAtt [DeleteCampaign, Arn]
            DeleteSolution: !GetAtt [DeleteSolution, Arn]
            DeleteDatasets: !GetAtt [DeleteDataset, Arn]
      RoleArn: !GetAtt [StatesExecutionRole, Arn]
  
  LambdaTrigger:
    Type: 'Custom::RouteTableLambda'
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt S3NotificationLambdaFunction.Arn
      Bucket: !Ref NotificationBucket
Outputs:
  DeployStateMachineArn:
    Description: The Create StateMachine Arn
    Value: !Ref DeployStateMachine
  DestroyStateMachineArn:
    Description: The Destroy StateMachine Arn
    Value: !Ref DestroyStateMachine
  NotificationTopicArn:
    Description: The Notification Topic Arn
    Value: !Ref NotificationTopic
  